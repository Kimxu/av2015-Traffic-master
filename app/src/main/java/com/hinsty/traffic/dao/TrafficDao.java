package com.hinsty.traffic.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.hinsty.traffic.dao.Traffic;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table TRAFFIC.
*/
public class TrafficDao extends AbstractDao<Traffic, Void> {

    public static final String TABLENAME = "TRAFFIC";

    /**
     * Properties of entity Traffic.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Year = new Property(0, Integer.class, "year", false, "YEAR");
        public final static Property Month = new Property(1, Integer.class, "month", false, "MONTH");
        public final static Property Day = new Property(2, Integer.class, "day", false, "DAY");
        public final static Property Rx = new Property(3, Long.class, "rx", false, "RX");
        public final static Property Tx = new Property(4, Long.class, "tx", false, "TX");
    };


    public TrafficDao(DaoConfig config) {
        super(config);
    }
    
    public TrafficDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'TRAFFIC' (" + //
                "'YEAR' INTEGER," + // 0: year
                "'MONTH' INTEGER," + // 1: month
                "'DAY' INTEGER," + // 2: day
                "'RX' INTEGER," + // 3: rx
                "'TX' INTEGER);"); // 4: tx
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_TRAFFIC_YEAR_MONTH_DAY ON TRAFFIC" +
                " (YEAR,MONTH,DAY);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'TRAFFIC'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Traffic entity) {
        stmt.clearBindings();
 
        Integer year = entity.getYear();
        if (year != null) {
            stmt.bindLong(1, year);
        }
 
        Integer month = entity.getMonth();
        if (month != null) {
            stmt.bindLong(2, month);
        }
 
        Integer day = entity.getDay();
        if (day != null) {
            stmt.bindLong(3, day);
        }
 
        Long rx = entity.getRx();
        if (rx != null) {
            stmt.bindLong(4, rx);
        }
 
        Long tx = entity.getTx();
        if (tx != null) {
            stmt.bindLong(5, tx);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public Traffic readEntity(Cursor cursor, int offset) {
        Traffic entity = new Traffic( //
            cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0), // year
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // month
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // day
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // rx
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4) // tx
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Traffic entity, int offset) {
        entity.setYear(cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0));
        entity.setMonth(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setDay(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setRx(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setTx(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(Traffic entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(Traffic entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
